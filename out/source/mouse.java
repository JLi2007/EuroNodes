/* autogenerated by Processing revision 1293 on 2024-12-28 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.Map;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class mouse extends PApplet {

public void mousePressed(){
    for(Node node: nodes){
        node.updateState();
    }
}
class Node{
    String country;
    float x,y;
    float radius;
    int defaultColour;  //default color and stroke
    int defaultStroke;
    int selectedColour; //selected color and stroke
    int selectedStroke;
    int currentColour;  //current color and stroke
    int currentStroke;
    boolean isSelected;
    HashMap<String, Integer> borderingCountries;

    Node(String name, float x, float y, float r){
        this.country = name;
        this.x = x;
        this.y = y;
        this.radius = r;
        this.defaultColour = color(44, 94, 232,100);     //default node color | blue
        this.defaultStroke = color(2, 30, 107);        //default node color stroke| darker blue
        this.selectedColour = color(191, 8, 75,100);     //when node is clicked | red & pink 
        this.selectedStroke = color(97, 5, 39);        //when node is clicked stroke | darker red & pink
        this.currentColour = this.defaultColour;       //initial state
        this.currentStroke = this.defaultStroke;
        this.isSelected = false;
        this.borderingCountries = new HashMap<String, Integer>();
    }

    // on mouse event
    public void updateState(){
        if(isMouseInside()){
            if (!this.isSelected){
                println("clicked " + this.country);
                this.currentColour = this.selectedColour;
                this.currentStroke = this.selectedStroke;
                this.isSelected = true;
            }
        }else{
          if (this.isSelected){
                println("released " + this.country);
                this.currentColour = this.defaultColour;
                this.currentStroke = this.defaultStroke;
                this.isSelected = false;
            }
        }
    }

    public void addDefaultNeighbors(){
        // default bordering calculations
        for(int n = 0; n<=nodes.size()-1; n++){
            int d = calculateDistance(this, nodes.get(n));
            if(d!=0 && d<borderingDistance){
                this.borderingCountries.put(nodes.get(n).country, d);
            }
        }
    }

    // prints the neighbors
    public void printNeighbors(){
        println("-------------------------------------");
        println(this.country + "'s neighbors: ");
        for (Map.Entry country : this.borderingCountries.entrySet()) {
            print(country.getKey() + " is ");
            println(country.getValue() + " units away");
        }
    }

    // checks if mouse is inside the node
    public boolean isMouseInside(){
        return dist(mouseX, mouseY, this.x, this.y) <= this.radius;
    }

    // calculate distance between two nodes
    public int calculateDistance(Node n1, Node n2){
        return PApplet.parseInt(dist(n1.x, n1.y, n2.x, n2.y));
    }

    public void drawNode(){
        strokeWeight(5);
        stroke(this.currentStroke);
        fill(this.currentColour);
        circle(this.x,this.y,2*this.radius);
    }
}



PImage map;
PFont font;
int borderingDistance = 300; //placeholder for now

//Arrays
ArrayList<Node> nodes = new ArrayList<Node>();

public void setup(){
    /* size commented out by preprocessor */;
    map = loadImage("europe.jpg");

    // font
    font = createFont("SansSerif", 15);
    textFont(font);
    textAlign(CENTER, CENTER);

    // create all the countries (nodes)
    nodes.add(new Node("Russia", 1017, 346, 35));
    nodes.add(new Node("Ukraine", 902, 463, 20));
    nodes.add(new Node("France", 448, 496, 18));
    nodes.add(new Node("Spain", 350, 664, 17));
    nodes.add(new Node("Sweden", 701, 264, 17));
    nodes.add(new Node("Germany", 626, 419, 16));
    nodes.add(new Node("Finland", 810, 240, 16));
    
    for(Node node:nodes){
        node.addDefaultNeighbors();
        node.printNeighbors();
    }
}

public void draw(){
    background(map);

    // draw the lines of reference
    stroke(0);
    strokeWeight(1);
    fill(0);

    // horizontal axis
    for(int x=0; x<=width/100; x++){
        line(100*x, 0, 100*x, height);
        text(str(100*x),100*x,10);
    }

    // vertical axis
    for(int y=1; y<=height/100; y++){
        line(0,100*y,width,100*y);
        text(str(100*y),20,100*y);
    }

    for(Node node: nodes){
        node.drawNode();
    }
}


  public void settings() { size(1250, 750); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "mouse" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
